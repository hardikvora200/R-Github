# na.omit => will omit the rows which has atleast 1 NA value
dim(Glass)### 600 6
colnames(Glass)
#####Load Data
set.seed(1)
library(class)
d = read.table("glass.csv", sep=",", header = FALSE)
d = data.frame(d)
d
-------------------------------------------------
#Measures of Central Tendency                hair
mean(Glass$RI)  ### -0.4257426
median(Zoo$RI)##### 0
median(Glass$RI)##### 0
getmode <- function(x){
uniquv <- unique(x)
uniquv[which.max(tabulate(match(x,uniquv)))]
}
getmode(Glass$RI)  ###### 0
#Measures of Dispersion
var(Glass$RI)  ###### 0.2469307
sd(Glass$RI)  #### 0.4969212
range(Glass$RI)##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$RI) ##### 1
#Measures of skewness
install.packages("moments")
install.packages("moments")
library(moments)
#Measures of skewness
skewness(Glass$RI)  #### 0.3003606
#Measures of Kurtosis
kurtosis(Glass$RI)######  1.090217
#Graphical Representation:-Boxplot, Histogram, Barplot
boxplot(Glass$RI,horizontal = TRUE)
hist(Glass$RI)
barplot(Glass$RI)
str(Glass)
#qqplot
qqnorm(Glass$RI)
qqline(Glass$RI)
#qqplot
qqnorm(Glass$RI)
qqline(Glass$RI)
expRI<-exp(Glass$RI)
qqnorm(expRI)
qqline(expRI)
sqrtRI<-sqrt(Glass$RI)
qqnorm(sqrtRI)
qqline(sqrtRI)
recRI<-(1/Glass$RI)
qqnorm(recRI)
qqline(recRI)
rec2RI<-recRI * recRI
qqnorm(rec2RI)
qqnorm(rec2RI)
rec4RI<-rec2RI * rec2RI
qqnorm(rec4RI)
qqline(rec4RI)
rec8RI<-rec4RI * rec4RI
qqnorm(rec8RI)
qqline(rec8RI)
rec16RI<-rec8RI * rec8RI
qqnorm(rec16RI)
rec32RI<-rec16RI * rec16RI
qqnorm(rec32RI)
rec64RI<-rec32RI * rec32RI
qqnorm(rec64RI)
qqline(rec64RI)
install.packages(psych)
library(psych)
describe(Zoo)
describe(Glass)
pnorm(Glass$RI,-1.518365,0.003036864)
algRI<-(Glass$RI * Glass$RI) + Glass$RI
qqnorm(algRI)
qqline(algRI)
-----------------------------------------------------------------------
#Measures of Central Tendency                feathers
mean(Glass$Na)  ### -0.1980198
median(Glass$Na)##### 0
#mode
getmode(Glass$Na)  #####  0
#Measures of Dispersion
var(Glass$Na)  ###### 0.160396
sd(Glass$Na)  ####  0.4004947
range(Glass$Na) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Na) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Na)  #### 1.515557
#Measures of Kurtosis
kurtosis(Glass$Na)###### 3.296914
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Na,horizontal = TRUE)
hist(Glass$Na)
barplot(Glass$Na)
#qqplot
qqnorm(Glass$Na)
qqline(Glass$Na)###Normalisation achieved
pnorm(Glass$Na,-13.40785,0.8166036)
-----------------------------------------------------------------------
#Measures of Central Tendency                eggs
mean(Glass$Mg)  ### -0.5841584
median(Glass$Mg)##### 1
#mode
getmode(Glass$Mg)  ##### 1
#Measures of Dispersion
var(Glass$Mg)  ###### 0.2453465
sd(Glass$Mg)  #### 0.4953247
range(Glass$Mg) ##### 0 1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Mg) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Mg)  #### -0.3415059
#Measures of Kurtosis
kurtosis(Glass$Mg)###### 1.116626
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Mg,horizontal = TRUE)
hist(Glass$Mg)
barplot(Glass$Mg)
#qqplot
qqnorm(Glass$Mg)
qqline(Glass$Mg)
expMg<-exp(Glass$Mg)
qqnorm(expMg)
logMg<-log(Glass$Mg)
qqnorm(logMg)
sqrtMg<-sqrt(Glass$Mg)
qqnorm(sqrtMg)
recMg<-(1/(Glass$Mg))
qqnorm(recMg)
algMg<-(Glass$Mg * Glass$Mg) + Glass$Mg
qqnorm(algMg)
pnorm(Glass$Mg,-2.684533,1.442408)
qqline(algMg)
sqrMg<-(Glass$Mg * Glass$Mg)
qqnorm(sqrMg)
expMg<-exp(Glass$Mg)
qqnorm(expMg)
recexpMg<-(1/(exp(Glass$Mg)))
qqnorm(recexpMg)
qqline(recexpMg)
------------------------------------------------------------------
#Measures of Central Tendency                milk
mean(Glass$Al)  ### 0.4059406
median(Glass$Al)##### 0
#mode
getmode(Glass$Al)  ##### 0
#Measures of Dispersion
var(Glass$Al)  ###### 0.2435644
sd(Glass$Al)  #### 0.4935224
range(Glass$Al) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Al) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Al)  #### 0.383077
#Measures of Kurtosis
kurtosis(Glass$Al)###### 1.146748
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Al,horizontal = TRUE)
hist(Glass$Al)
barplot(Glass$Al)
#qqplot
qqnorm(Glass$Al)
qqline(Glass$Al)
logAl<-log(Glass$Al)
qqnorm(logAl)
qqline(logAl)
expAl<-exp(Glass$Al)
qqnorm(expAl)
qqline(expAl)
pnorm(Glass$Al,1.444907,0.4992696)
-------------------------------------------------------------------
#Measures of Central Tendency                airborne
mean(Glass$Si)  ### -0.2376238
median(Glass$Si)##### 0
#mode
getmode(Glass$Si)  ##### 0
#Measures of Dispersion
var(Glass$Si)  ######0.1829703
sd(Glass$Si)  #### 0.4277503
range(Glass$Si) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Si) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Si)  #### 1.232892
#Measures of Kurtosis
kurtosis(Glass$Si)###### 2.520022
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Si,horizontal = TRUE)
hist(Glass$Si)
barplot(Glass$Si)
#qqplot
qqnorm(Glass$Si)
qqline(Glass$Si)
pnorm(Glass$Si,-72.65093,0.7745458)
-------------------------------------------------------------
#Measures of Central Tendency                aquatic
mean(Glass$K)  ### -0.3564356
median(Glass$K)##### 0
#mode
getmode(Glass$K)  ##### 0
#Measures of Dispersion
var(Glass$K)  ###### 0.2316832
sd(Glass$K)  #### 0.4813348
range(Glass$K) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$K) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$K)  #### 0.5995012
#Measures of Kurtosis
kurtosis(Glass$K)###### 1.359402
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$K,horizontal = TRUE)
hist(Glass$K)
barplot(Glass$K)
#qqplot
qqnorm(Glass$K)
qqline(Glass$K)
expK<-exp(Glass$K)
qqnorm(expK)
qqline(expK)
pnorm(Glass$K,-0.4970561,0.6521918)
--------------------------------------------------------------
#Measures of Central Tendency                Predator
mean(Glass$Ca)  ### 0.5544554
median(Glass$Ca)##### 1
#mode
getmode(Glass$Ca)  ##### 1
#Measures of Dispersion
var(Glass$Ca)  ###### 0.249505
sd(Glass$Ca)  #### 0.4995047
range(Glass$Ca) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Ca) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Ca)  #### -0.2191252
#Measures of Kurtosis
kurtosis(Glass$Ca)###### 1.048016
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Ca,horizontal = TRUE)
hist(Glass$Ca)
barplot(Glass$Ca)
#qqplot
qqnorm(Glass$Ca)
qqline(Glass$Ca)
expCa<-exp(Glass$Ca)
qqnorm(expCa)
qqline(expCa)
pnorm(Glass$Ca,8.956963,1.423153)
-------------------------------------------------------------------
#Measures of Central Tendency                Toothed
mean(Glass$Ba)  ### -0.6039604
median(Glass$Ba)##### 1
#mode
getmode(Glass$Ba)  ##### 1
#Measures of Dispersion
var(Glass$Ba)  ###### 0.2415842
sd(Glass$Ba)  #### 0.4915121
range(Glass$Ba) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Ba) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Ba)  #### 0.04384163
#Measures of Kurtosis
kurtosis(Glass$Ba)###### 1.180738
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Ba,horizontal = TRUE)
hist(Glass$Ba)
barplot(Glass$Ba)
#qqplot
qqnorm(Glass$Ba)
qqline(Glass$Ba)
pnorm(Glass$Ba,-0.1750467,0.4972193)
---------------------------------------------------------------------
#Measures of Central Tendency                backbone
mean(Glass$Fe)  ### -0.8217822
median(Glass$Fe)##### 1
#mode
getmode(Glass$Fe)  ##### 1
#Measures of Dispersion
var(Glass$Fe)  ###### 0.1479208
sd(Glass$Fe)  #### 0.3846047
range(Glass$Fe) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Fe) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Fe)  #### -1.681659
#Measures of Kurtosis
kurtosis(Glass$Fe)###### 3.827979
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Fe,horizontal = TRUE)
hist(Glass$Fe)
barplot(Glass$Fe)
#qqplot
qqnorm(Glass$Fe)
qqline(Glass$Fe)
expFe<-exp(Glass$Fe)
qqnorm(expFe)
qqline(expFe)
sqrtFe<-sqrt(Glass$Fe)
qqnorm(sqrtFe)
qqline(sqrtFe)
recexpFe<-(1/(exp(Glass$Fe)))
qqnorm(recexpFe)
qqline(recexpFe)
pnorm(Glass$Fe,-0.05700935,0.0974387)
---------------------------------------------------------------
#Measures of Central Tendency                breathes
mean(Glass$Type)  ### -0.7920792
median(Glass$Type)##### 1
#mode
getmode(Glass$Type)  ##### 1
#Measures of Dispersion
var(Glass$Type)  ###### 0.1663366
sd(Glass$Type)  #### 0.4078439
range(Glass$Type) ##### 0  1
rangevalue <- function(x){max(x)-min(x)}
rangevalue(Glass$Type) ##### 1
#Measures of skewness
library(moments)
#Measures of skewness
skewness(Glass$Type)  #### -1.439453
#Measures of Kurtosis
kurtosis(Glass$Type)###### 3.072024
#Graphical Representation :- Boxplot , Histogram, Barplot
boxplot(Glass$Type,horizontal = TRUE)
hist(Glass$Type)
barplot(Glass$Type)
#qqplot
qqnorm(Glass$Type)
qqline(Glass$Type)
expType<-exp(Glass$Type)
qqnorm(expType)
qqline(expType)
pnorm(Glass$Type,-2.780374,2.103739)
Glass <- read.csv("C:\\Users\\sanu\\Downloads\\Desktop\\Documents\\Excelr\\KNN\\glass.csv")
View(Glass)
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
Type <- table(d$Type)
d_target <- d[, 11]
d_target <- d[, 10]
d_key <- d[, 1]
####table of type
table(Glass$Type)
names(Types) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
Types <- table(d$Type)
Type <- table(d$Type)
####table of type
table(Glass$Type)
names(Type) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
Type
##types<-types[-8]
summary(d)
str(d)
Glass$Type <- factor(Glass$Type, levels = c("1","2","3","4","5","6","7"), labels = c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps"))
Glass$Type <- factor(Glass$Type, levels = c("1","2","3","4","5","6","7"), labels = c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ","containers", "tableware", "headlamps"))
# table or proportation of enteries in the datasets.
round(prop.table(table(Glass$Type))*100,1)
####table of type
table(Glass$Type)
Glass(Type) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
names(Type) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
####table of type
table(Glass$Type)
# Type is factor with 7 levels. We also replacing these 7 entries with mammal,bird,reptile,fish, amphibian, insect, crustacean
Glass$Type <- factor(Glass$Type, levels = c("1","2","3","4","5","6","7"), labels = c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ","containers", "tableware", "headlamps"))
####table of type
table(Glass$Type)
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
Type <- table(d$Type)
d_target <- d[, 10]
d_key <- d[, 1]
####table of type
table(Glass$Type)
d_target <- d[, 11]
Glass
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
type <- table(d$Type)
d_target <- d[, 10]
d_key <- d[, 1]
####table of type
table(Glass$type)
####table of type
table(Glass$Type)
# Replace type 1,2,3,4,5,6,7 with mammal,bird,reptile,fish, amphibian, insect, crustacean
# Type is factor with 7 levels. We also replacing these 7 entries with mammal,bird,reptile,fish, amphibian, insect, crustacean
Glass$Type <- factor(Glass$Type, levels = c("1","2","3","4","5","6","7"), labels = c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ","containers", "tableware", "headlamps"))
# table or proportation of enteries in the datasets.
round(prop.table(table(Glass$Type))*100,1)
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
type <- table(Glass$Type)
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(Glass) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
Glass <- read.csv("C:\\Users\\sanu\\Downloads\\Desktop\\Documents\\Excelr\\KNN\\glass.csv")
View(Glass)
d = read.table("glass.csv", sep=",", header = FALSE)
d = data.frame(d)
d
------------------------------------------------------------------
#####Data Conditioning in which Pythogenic traits used for classification
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
ation
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
names(d) <- c("RI", "Na", "Mg","Al","Si","K","Ca","Ba","Fe","Type")
type <- table(d$Type)
type
d_target <- d[, 10]
d_key <- d[, 1]
####table of type
table(Glass$Type)
names(Type) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
names(type) <- c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ",
"containers", "tableware", "headlamps")
type
##types<-types[-8]
summary(d)
str(d)
Glass$Type <- factor(Glass$Type, levels = c("1","2","3","4","5","6","7"), labels = c("building_windows_float_processed", "building_windows_non_float_processed",
"vehicle_windows_float_processed", "vehicle_windows_non_float_processed ","containers", "tableware", "headlamps"))
# table or proportation of enteries in the datasets.
round(prop.table(table(Glass$Type))*100,1)
summary(Glass[c("RI","Na", "Mg")])
norm <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
View(Glass)
#Apply the normalization function to wbcd dataset
Glass_norm <- as.data.frame(lapply(Glass[1:9], norm))
View(Glass_norm)
#create training and test datasets
Glass_train <- Glass_norm[1:170,]
Glass_test <- Glass_norm[171:214,]
#Get labels for training and test datasets
Glass_train_labels <- Glass[1:170,10]
Glass_test_labels <- Glass[171:214,10]
# Build a KNN model on taining dataset
library("class")
# Building the KNN model on training dataset and also need labels which we are including c1. Once we build the preduction model
# we have to test on test dataset
test_acc <- NULL
train_acc <- NULL
for (i in seq(1,170,1))
{
train_Glass_pred <- knn(train=Glass_train,test=Glass_train,cl=Glass_train_labels,k=i)
train_acc <- c(train_acc,mean(train_Glass_pred==Glass_train_labels))
test_Glass_pred <- knn(train = Glass_train, test = Glass_test, cl = Glass_train_labels, k=i)
test_acc <- c(test_acc,mean(test_Glass_pred==Glass_test_labels))
}
# Plotting 2 different graphs on same window
par(mfrow=c(1,2)) # c(1,2) => indicates 1 row and 2 columns
plot(seq(1,170,1),train_acc,type="l",main="Train_accuracy",col="blue")
plot(seq(1,170,1),test_acc,type="l",main="Test_accuracy",col="red")
acc_neigh_df <- data.frame(list(train_acc=train_acc,test_acc=test_acc,neigh=seq(1,170,1)))
# Plotting 2 different graphs on same co-ordinate axis
install.packages("ggplot2")
library(ggplot2)
ggplot(acc_neigh_df,aes(x=neigh))+
geom_line(aes(y=train_acc,colour="train_acc"),lwd=1.5)+
geom_line(aes(y=test_acc,colour="test_acc"),lwd=1.5)+
scale_fill_manual(" ",breaks=c("train_acc","test_acc"),values = c("train_acc"="green","test_acc"="red"))
Glass_pred <- knn(train = Glass_train, test = Glass_test, cl = Glass_train_labels, k=11)
Glass_pred
